                           _________________

                            HW 06 QUESTIONS
                           _________________


- Name: Alex Biedny
- NetID: biedn001

Write your answers to the questions below directly in this text file.
Submit the whole text file while taking the associated quiz.


PROBLEM 1: Directory Operations
===============================

A
~

  Examine the source code of `dirops.c' closely. It makes use of a
  variety of system calls to produce a semi-interesting effect.  Compile
  and run it several times. Describe the overall intent of the program
  based on its output and the code you understand.

This program opens the directory it is being executed from, finds the largest file
(or in the case of two files with the same size, the first file of that size that is found),
and then copies that file to a new file named "oldname.copy"

B
~

  What set of system calls is used by the program to determine all the
  files in the current directory? Describe briefly how these calls work
  together.

First the directory is opened with a call to opendir(). Then, readdir() is used to
read everything in the opened directory stream, in the context of a loop. A call to
stat() is used to get info about the files in the directory, like size. closedir() is then
used to close the directory.

C
~

  Identify the system call that `dirops.c' uses to find the sizes of
  files. Describe briefly how this call works.

It uses a call to stat(), which is given the path to the file, and a buffer as arguments.
When it is called, the stat struct will be populated with info about the file.

D
~

  The following line sets up the read/write permissions that the copied
  file will have.
  ,----
  | mode_t perms = S_IRUSR | S_IWUSR;
  `----
  Modify this line so that the copied file is readable by the group as
  well as the user.

  It should read mode_t perms = S_IRUSR | S_IWUSR | S_IRGRP;

  /Optional challenge:/ Set the permissions to be identical to the
  original file. `stat()' is one way to find out the permissions for the
  original file.


E
~

  `dirops.c' contains a subtle bug in the following bit of code towards
  the end of the file.
  ,----
  |   while( (nbytes = read(infd, buf, BUFSIZE)) > 0){
  |     write(outfd, buf, BUFSIZE);
  |   }
  `----
  You should observe that every time program is run, it will identify a
  copied file as the largest and make another copy due to this bug. It
  may help to examine the ends of the copied files with the `tail
  file.txt.copy' command which will show the last 10 lines.

  Explain what is wrong with the loop and paste a fixed version below.

The last iteration of the loop was only reading a few bytes, but it was writing
the entire buffer to the new file, which was still populated with the data from the 
previous read() call. Fixed:
int nbytes;
while( (nbytes = read(infd, buf, BUFSIZE)) > 0){
  write(outfd, buf, nbytes);
}

PROBLEM 2: Binary File Format w/ Read
=====================================

A
~

  Compile all programs in the directory `binfiles/' with the provided
  `Makefile'.  Run the command
  ,----
  | ./make_dept_directory cse_depts.dat
  `----
  to create the `cse_depts.dat' binary file. Examine the source code for
  this program along with the header `department.h'.
  - What system calls are used in `make_dept_directory.c' to create this
    file?
  - How is the `sizeof()' operator used to simplify some of the
    computations in `make_dept_directory.c'?
  - What data is in `cse_depts.dat' and how is it ordered?

First, an open() call is used to open and create the file passed into the program
as an argument. Then, several calls to write() are used to actually write the file.
It is then close()'ed after writing is done.

B
~

  Run the `print_department_read' program which takes a binary data file
  and a department code to print.  Show a few examples of running this
  program with the valid command line arguments. Include in your demo
  runs that
  - Use the `cse_depts.dat' with known and unknown department codes
  - Use a file other than `cse_depts.dat'

abied@LAPTOP-E6H4COPE:/mnt/c/Users/abied/Documents/CSCI4061/hw6/hw06-code/binfiles$ ./print_department_read cse_depts.dat EE
Dept Name: CS Offset: 104
Dept Name: EE Offset: 2152
Dept Name: IT Offset: 3688

6 Contacts for EE department
Mehmet Akcakaya <akcakaya@umn.edu>
Massoud Amin <amin@umn.edu>
Raj Aravalli <aravalli@umn.edu>
Kia Bazargan <kia@umn.edu>
Itshak Bergel <ibergel@umn.edu>
Stephen Campbell <scampbell@umn.edu>

abied@LAPTOP-E6H4COPE:/mnt/c/Users/abied/Documents/CSCI4061/hw6/hw06-code/binfiles$ ./print_department_read cse_depts.dat QQ
Dept Name: CS Offset: 104
Dept Name: EE Offset: 2152
Dept Name: IT Offset: 3688
Department code 'QQ' not found

abied@LAPTOP-E6H4COPE:/mnt/c/Users/abied/Documents/CSCI4061/hw6/hw06-code/binfiles$ ./print_department_read Makefile EE
'Makefile' does not appear to be a binary department directory file

C
~

  Study the source code for `print_department_read' and describe how it
  initially prints the table of offsets shown below.
  ,----
  | Dept Name: CS Offset: 104
  | Dept Name: EE Offset: 2152
  | Dept Name: IT Offset: 3688
  `----
  What specific sequence of calls leads to this information?

The binary file is first opened with open(). After that, read is used to read the binary
data into dept_offset_t structures. From this struct, we can get the 
department offset.

D
~

  What system call is used to skip immediately to the location in the
  file where desired contacts are located? What arguments does this
  system call take? Consult the manual entry for this function to find
  out how else it can be used.

lseek() is used to skip ahead to a certain dpertmental offset. lseek() takes
a file descriptor, the offset to set the file stream too, and then a settings
aargument that determines how the file offset will be set.


PROBLEM 3: mmap() and binary files
==================================

  An alternative to using standard I/O functions is "memory mapped"
  files through the system call `mmap()'. The program
  `print_department_mmap.c' provides the functionality as the previous
  `print_department_read.c' but uses a different mechanism.


(A)
~~~

  Early in `print_department_mmap.c' an `open()' call is used as in the
  previous program but it is followed shortly by a call to `mmap()' in
  the lines
  ,----
  |   char *file_bytes =
  |     mmap(NULL, size, PROT_READ, MAP_SHARED,
  |          fd, 0);
  `----
  Look up reference documentation on `mmap()' and describe some of the
  arguments to it including the `NULL' and `size' arguments. Also
  describe its return value.

The first argument to mmap() is a memory address which will be the starting address of the
new virtual memory mapping. If it is NULL, then the kernel chooses this address. The second
arg is the size of the memory to map, the third is the memory protection options, the fourth is
flags that specify whther this memory mapping is visible to other processes or not. The next two
arguments are teh file descriptor to map to memory, and the offset of that mapping.

(B)
~~~

  The initial setup of the program uses `mmap()' to assign a pointer to
  variable `char *file_bytes'.  This pointer will refer directly to the
  bytes of the binary file.

  Examine the lines
  ,----
  |   ////////////////////////////////////////////////////////////////////////////////
  |   // CHECK the file_header_t struct for integrity, size of department array
  |   file_header_t *header = (file_header_t *) file_bytes; // binary header struct is first thing in the file
  `----

  Explain what is happening here: what value will the variable `header'
  get and how is it used in subsequent lines.

  This is assigning the variable "header" to point to the same location in memory as the variable
  "file_bytes", which in this case is the opened file. "header" will contain the first n bytes of file_bytes,
  where n is the size of file_header_t. It is then used to check the values of characters at certain byte locations.


(C)
~~~

  After finishing with the file header, the next section of the program
  begins with the following.
  ,----
  |   ////////////////////////////////////////////////////////////////////////////////
  |   // SEARCH the array of department offsets for the department named
  |   // on the command line
  | 
  |   dept_offset_t *offsets =           // after file header, array of dept_offset_t structures
  |     (dept_offset_t *) (file_bytes + sizeof(file_header_t));
  | 
  `----

  Explain what value the `offsets_arr' variable is assigned and how it
  is used in the remainder of the SEARCH section.

The "offsets_arr" variable is a dept_offset_t that is populated with the binary data from the file,
starting after the header. It is used to get the department offsets by iterating through the number of departments
and getting and offset number for them.


(D)
~~~

  The final phase of the program begins below
  ,----
  |   ////////////////////////////////////////////////////////////////////////////////
  |   // PRINT out all personnel in the specified department
  |   ...
  |   contact_t *dept_contacts = (contact_t *) (file_bytes + offset);
  `----
  Describe what value `dept_contacts' is assigned and how the final
  phase uses it.

"dept_contacts" is a pointer to the memory location with department contacts, which is found by
offsetting the file_bytes pointer with the known departmental offset. This pointer is used to
iterate over the departmental contacts array and print all of their information.